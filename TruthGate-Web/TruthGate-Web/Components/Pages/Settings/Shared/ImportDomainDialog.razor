@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using TruthGate_Web.Interfaces
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar
@inject IApiKeyProvider Keys
@inject NavigationManager Nav
@inject ITruthGatePublishService PublishService
<MudDialog>
    <DialogContent>
        <MudTextField Label="Passphrase"
                      @bind-Value="_pass"
                      InputType="InputType.Password"
                      Immediate="true"
                      Required="true" />

                      <br />
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="OnFileChanged" MaxItems="1">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.VpnKey">
                    Select Backup (.tgbackup)
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Submit"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@(_file is null || string.IsNullOrWhiteSpace(_pass))">
            Import
        </MudButton>
        <MudButton OnClick="()=>MudDialog.Cancel()">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private IBrowserFile? _file;
    private string? _pass;

    private void OnFileChanged(IReadOnlyList<IBrowserFile> picked)
        => _file = picked.FirstOrDefault();

    private async Task Submit()
    {
        if (_file is null || string.IsNullOrWhiteSpace(_pass)) return;

        try
        {
            await using var stream = _file.OpenReadStream(long.MaxValue);
            var (domain, key, peerId) = await PublishService.ImportBackupAsync(stream, _pass, CancellationToken.None);

            Snackbar.Add($"Imported: {domain} (key: {key}, peer: {peerId})", Severity.Success);
            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import failed: {ex.Message}", Severity.Error);
        }
    }

}
