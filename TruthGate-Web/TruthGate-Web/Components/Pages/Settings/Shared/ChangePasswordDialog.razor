@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" Model="@_model" Validation="@Validate">
            <MudText Typo="Typo.subtitle1" Class="mb-2">User: <b>@TargetUserName</b></MudText>
            <MudTextField Label="New Password" @bind-Value="_model.Password" InputType="InputType.Password" Immediate="true" Required="true" />
            <MudTextField Label="Confirm Password" @bind-Value="_model.Confirm" InputType="InputType.Password" Immediate="true" Required="true" />
            @if (!string.IsNullOrEmpty(_error))
            {
                <MudText Color="Color.Error" Class="mt-2">@_error</MudText>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="@Submit" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public string TargetUserName { get; set; } = "";

    public class ChangePasswordResult
    {
        public string NewPassword { get; set; } = "";
    }

    private MudForm _form = default!;
    private Model _model = new();
    private string? _error;

    private class Model
    {
        public string Password { get; set; } = "";
        public string Confirm { get; set; } = "";
    }

    private IEnumerable<string> Validate()
    {
        _error = null;

        if (string.IsNullOrEmpty(_model.Password))
            yield return "Password is required.";

        if (_model.Password != _model.Confirm)
            yield return "Passwords must match.";
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        var result = new ChangePasswordResult { NewPassword = _model.Password };
        MudDialog.Close(DialogResult.Ok(result));
    }
}