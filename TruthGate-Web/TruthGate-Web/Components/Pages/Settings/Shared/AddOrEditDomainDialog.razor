@using MudBlazor
@using TruthGate_Web.Utils

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" Model="_model" Validation="@Validate">
            <MudTextField Label="Domain (e.g., example.com)"
            @bind-Value="_model.Domain"
            Immediate="true"
            Required="true"
            For="@(()=>_model.Domain)" />

            <div class="mt-3">
                <div class="mt-3">
                    <MudSwitch T="bool"
                    @bind-Value="_model.UseSSL"
                    Color="Color.Primary"
                    Label="@(_model.UseSSL ? "Enabled" : "Disabled")"
                    />
                </div>
                <MudText Class="ml-2" Typo="Typo.body2">
                    When enabled, TruthGate provisions a valid Let’s Encrypt certificate for this domain.
                    When disabled, a self-signed certificate is used (still HTTPS), intended for use behind infra like Cloudflare.
                </MudText>
            </div>

            <MudTextField Label="Redirect URL"
            @bind-Value="_model.RedirectUrl"
            Immediate="true"
            Required="false"
            For="@(()=>_model.RedirectUrl)" />
            <MudText Class="ml-2" Typo="Typo.body2">
                Leave empty to serve this domain normally.
                If a Redirect URL is set, all visitors will be instantly redirected there instead.
            </MudText>


            @if (!string.IsNullOrEmpty(_error))
            {
                <MudText Color="Color.Error" Class="mt-2">@_error</MudText>
            }
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="@Submit" Color="Color.Primary" Variant="Variant.Filled">
            @(_isEdit ? "Save" : "Add")
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public string? InitialDomain { get; set; }
    [Parameter] public bool InitialUseSSL { get; set; }
    [Parameter] public string? InitialRedirectUrl { get; set; }

    private readonly Model _model = new();
    private MudForm _form = default!;
    private string? _error;
    private bool _isEdit => IsEdit;

    protected override void OnInitialized()
    {
        _model.Domain = InitialDomain ?? string.Empty;
        _model.UseSSL = InitialUseSSL;
        _model.RedirectUrl = InitialRedirectUrl;
    }

    public sealed class DomainResult
    {
        public string Domain { get; set; } = "";
        public bool UseSSL { get; set; }
        public string? RedirectUrl { get; set; }
    }

    private sealed class Model
    {
        public string Domain { get; set; } = "";
        public bool UseSSL { get; set; }
        public string? RedirectUrl { get; set; }
    }

    private IEnumerable<string> Validate()
    {
        _error = null;

        if (string.IsNullOrWhiteSpace(_model.Domain))
            yield return "Domain is required.";
    }

    private void Cancel() => MudDialog.Cancel();

    [Inject] IHttpClientFactory HttpFactory { get; set; } = default!;
    [Inject] Microsoft.Extensions.Caching.Memory.IMemoryCache Cache { get; set; } = default!;

    private static string ToSafeFolderLeaf(string input)
    {
        var s = (input ?? "").Trim().ToLowerInvariant();
        // kill pathy stuff — you only want a single folder leaf here
        s = s.Replace('\\', '/').Trim('/');
        if (s.Contains("..")) throw new InvalidOperationException("Invalid domain.");
        if (string.IsNullOrWhiteSpace(s)) throw new InvalidOperationException("Empty domain.");
        return s;
    }

    private async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        var domainLeaf = ToSafeFolderLeaf(_model.Domain);
        var basePath = "/production/sites";
        var fullPath = $"{basePath}/{domainLeaf}";

        // Ensure the folder path exists (creates parents as needed), returns final CID
        var cid = await IpfsGateway.EnsureMfsFolderExistsAsync(fullPath, HttpFactory);

        // (Optional) warm/refresh your cached CID for this MFS path, so the rest of your app sees it:
        var ttl = TimeSpan.FromHours(2);
        _ = await IpfsGateway.GetCidForMfsPathAsync(
                fullPath, HttpFactory, Cache, ttl, IpfsGateway.CacheMode.Refresh);

        var result = new DomainResult
        {
            Domain = _model.Domain,   // normalization happens on the page
            UseSSL = _model.UseSSL,
            RedirectUrl = _model.RedirectUrl
        };

        MudDialog.Close(DialogResult.Ok(result));
    }
}
