@using System.Net.Http.Json
@using System.Text.Json
@using TruthGate_Web.Endpoints
@using TruthGate_Web.Models
@implements IAsyncDisposable
@inject IHttpClientFactory httpFactor

<MudCard Class="mx-auto" Style="max-width: 200px; height: 200px; display:flex; align-items:center; justify-content:center;">
    <div style="text-align:center;">
        <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">Peers</MudText>

        @if (peerCount is null && string.IsNullOrEmpty(error))
        {
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        }
        else if (!string.IsNullOrEmpty(error))
        {
            <MudText Color="Color.Error" Typo="Typo.subtitle2">@error</MudText>
        }
        else
        {
            <MudText Typo="Typo.h3">@peerCount</MudText>
        }
    </div>
</MudCard>

@code {
    // Optional: set if your proxy requires it
    [Parameter] public string? ApiKey { get; set; }

    // Optional: tweak refresh cadence
    [Parameter] public int RefreshSeconds { get; set; } = 3;

    private int? peerCount;
    private string? error;

    private PeriodicTimer? _timer;
    private readonly CancellationTokenSource _cts = new();

    private static readonly JsonSerializerOptions JsonOpts = new()
        {
            PropertyNameCaseInsensitive = true
        };

    protected override async Task OnInitializedAsync()
    {
        _timer = new PeriodicTimer(TimeSpan.FromSeconds(Math.Max(1, RefreshSeconds)));

        // initial load
        await LoadPeers();

        // background refresh loop
        _ = RefreshLoop();
    }

    private async Task RefreshLoop()
    {
        if (_timer is null) return;

        try
        {
            while (await _timer.WaitForNextTickAsync(_cts.Token))
            {
                await LoadPeers();
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { /* normal during dispose */ }
    }

    private async Task LoadPeers()
    {
        try
        {
            error = null;

            using var resp = await ApiProxyEndpoints.SendProxyApiRequest("/api/v0/swarm/peers", httpFactor);
            resp.EnsureSuccessStatusCode();

            var data = await resp.Content.ReadFromJsonAsync<PeersResponse>(JsonOpts, _cts.Token);
            peerCount = data?.Peers?.Count ?? 0;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            peerCount = null;
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            _cts.Cancel();
            _timer?.Dispose();
        }
        catch { /* no-op */ }
        await Task.CompletedTask;
    }
}
