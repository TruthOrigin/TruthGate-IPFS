
@using System.Net.Http.Json
@using System.Text.Json
@using TruthGate_Web.Endpoints
@typeparam T
@implements IAsyncDisposable
@inject IHttpClientFactory HttpFactory

<MudCard Class="mx-auto" Style="max-width: 210px; height: 210px; display:flex; align-items:center; justify-content:center; padding:10px;">
    <div style="text-align:center;">
        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-1">@Title</MudText>

        @if (string.IsNullOrWhiteSpace(DisplayValue) && string.IsNullOrEmpty(Error))
        {
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        }
        else if (!string.IsNullOrEmpty(Error))
        {
            <MudText Color="Color.Error" Typo="Typo.caption">@Error</MudText>
        }
        else
        {
            <MudText Typo="@ValueTypo">@((MarkupString)DisplayValue)</MudText>
        }

        @if (!AutoRefresh)
        {
            <MudButton Class="mt-2" Size="Size.Small" Variant="Variant.Outlined" OnClick="ManualRefresh">Refresh</MudButton>
        }
    </div>
</MudCard>

@code {
    // -------- Parameters --------
    [Parameter] public string Title { get; set; } = "Stat";
    [Parameter] public string Endpoint { get; set; } = ""; // e.g. "/api/v0/swarm/peers"
    [Parameter] public Func<T?, string> ValueSelector { get; set; } = _ => "";
    [Parameter] public bool AutoRefresh { get; set; } = true;
    [Parameter] public int RefreshSeconds { get; set; } = 3;
    [Parameter] public Typo ValueTypo { get; set; } = Typo.h4;

    // If your proxy needs it, you can pass it through (use inside SendProxyApiRequest if needed)
    [Parameter] public string? ApiKey { get; set; }

    // -------- State --------
    private string? Error;
    private string DisplayValue = "";
    private PeriodicTimer? _timer;
    private readonly CancellationTokenSource _cts = new();

    private static readonly JsonSerializerOptions JsonOpts = new()
        {
            PropertyNameCaseInsensitive = true
        };

    protected override async Task OnInitializedAsync()
    {
        // First load
        await LoadOnce();

        // Optional background refresh
        if (AutoRefresh)
        {
            _timer = new PeriodicTimer(TimeSpan.FromSeconds(Math.Max(1, RefreshSeconds)));
            _ = RefreshLoop(); // fire-and-forget
        }
    }

    private async Task RefreshLoop()
    {
        if (_timer is null) return;

        try
        {
            while (await _timer.WaitForNextTickAsync(_cts.Token))
            {
                await LoadOnce();
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { /* normal */ }
    }

    private async Task LoadOnce()
    {
        try
        {
            Error = null;

            using var resp = await ApiProxyEndpoints.SendProxyApiRequest(Endpoint, HttpFactory);
            resp.EnsureSuccessStatusCode();

            var data = await resp.Content.ReadFromJsonAsync<T>(JsonOpts, _cts.Token);
            var value = ValueSelector?.Invoke(data) ?? "";

            // Guard against null/whitespace—keep UX consistent
            DisplayValue = string.IsNullOrWhiteSpace(value) ? "—" : value;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            DisplayValue = "";
        }
    }

    private async Task ManualRefresh()
    {
        await LoadOnce();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            _cts.Cancel();
            _timer?.Dispose();
        }
        catch { /* no-op */ }
        await Task.CompletedTask;
    }
}
