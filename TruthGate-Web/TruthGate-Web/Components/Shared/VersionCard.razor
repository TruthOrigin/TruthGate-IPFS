@using System.Net.Http.Json
@using System.Text.Json
@using TruthGate_Web.Endpoints
@using TruthGate_Web.Models
@inject IHttpClientFactory httpFactor

<MudCard Class="mx-auto" Style="max-width: 200px; height: 200px; display:flex; align-items:center; justify-content:center;">
    <div style="text-align:center;">
        <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">IPFS V.</MudText>

        @if (Version is null && string.IsNullOrEmpty(error))
        {
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        }
        else if (!string.IsNullOrEmpty(error))
        {
            <MudText Color="Color.Error" Typo="Typo.subtitle2">@error</MudText>
        }
        else
        {
            <MudText Typo="Typo.h3">@($"{Version?.Version}")</MudText>
        }
    </div>
</MudCard>

@code {
    // Optional: set if your proxy requires it
    [Parameter] public string? ApiKey { get; set; }

    private VersionResponse? Version;
    private string? error;

    private static readonly JsonSerializerOptions JsonOpts = new()
        {
            PropertyNameCaseInsensitive = true
        };

    protected override async Task OnInitializedAsync()
    {     
        // initial load
        await LoadData();
    }


    private async Task LoadData()
    {
        try
        {
            error = null;

            using var resp = await ApiProxyEndpoints.SendProxyApiRequest("/api/v0/version", httpFactor);
            resp.EnsureSuccessStatusCode();

            var data = await resp.Content.ReadFromJsonAsync<VersionResponse>(JsonOpts);
            Version = data;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Version = null;
        }
    }

}
